import os
from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from shop.models import Bouquet, Customer, Order
from telegram_bot.staticfiles import keyboards
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import dateparser

router = Router()


class CustomOccasionState(StatesGroup):
    waiting_for_custom_occasion = State()
    waiting_for_phone = State()


class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_delivery_time = State()
    waiting_for_phone = State()


@router.message(CommandStart())
async def start_handler(message: types.Message):
    user_name = (
        message.from_user.username
        if message.from_user.username
        else message.from_user.first_name
    )
    text = f"–ü—Ä–∏–≤–µ—Ç, {user_name} üôã‚Äç‚ôÄÔ∏è! FlowerShop –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è. –ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π"
    await message.answer(text, reply_markup=keyboards.get_occasion_keyboard())


@router.callback_query(lambda c: c.data == "occasion_other")
async def handle_other_occasion(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–≤–æ–¥:")
    await state.set_state(CustomOccasionState.waiting_for_custom_occasion)
    await callback.answer()


@router.message(CustomOccasionState.waiting_for_custom_occasion)
async def process_custom_occasion(message: types.Message, state: FSMContext):
    user_occasion = message.text
    text = f"–°–ø–∞—Å–∏–±–æ! –í—ã —É–∫–∞–∑–∞–ª–∏ –ø–æ–≤–æ–¥: *{user_occasion}* üíê"
    keyboard = keyboards.get_occasion_keyboard()
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await state.clear()


@router.callback_query(lambda c: c.data == "view_collection")
async def view_collection(callback: types.CallbackQuery):
    bouquets = await sync_to_async(list)(Bouquet.objects.all())
    if not bouquets:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤ üòî")
        return
    for bouquet in bouquets:
        text = (
            f"üå∏ *{bouquet.name}*\n{bouquet.description}\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç",
                        callback_data=f"bouquet_{bouquet.id}",
                    )
                ]
            ]
        )
        if bouquet.image:
            image_path = bouquet.image.path
            if os.path.exists(image_path):
                img_input = FSInputFile(image_path)
                await callback.message.answer_photo(
                    img_input,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
            else:
                await callback.message.answer(
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—É–∫–µ—Ç–∞ {bouquet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                )
        else:
            await callback.message.answer(
                text, parse_mode="Markdown", reply_markup=keyboard
            )
    await callback.answer()


@router.callback_query(lambda c: c.data == "consultation")
async def request_consultation(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç"
    )
    await state.set_state(CustomOccasionState.waiting_for_phone)
    await callback.answer()


@router.message(CustomOccasionState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.text
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {phone_number} –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("occasion_"))
async def handle_occasion(callback: types.CallbackQuery):
    occasion_key = callback.data.replace("occasion_", "")
    if occasion_key == "other":
        return
    bouquets = await sync_to_async(list)(Bouquet.objects.filter(occasion=occasion_key))
    if not bouquets:
        await callback.message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è üòî"
        )
        return
    for bouquet in bouquets:
        text = (
            f"üå∏ *{bouquet.name}*\n{bouquet.description}\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç",
                        callback_data=f"bouquet_{bouquet.id}",
                    )
                ]
            ]
        )
        if bouquet.image:
            image_path = bouquet.image.path
            if os.path.exists(image_path):
                img_input = FSInputFile(image_path)
                await callback.message.answer_photo(
                    img_input,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
            else:
                await callback.message.answer(
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—É–∫–µ—Ç–∞ {bouquet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                )
        else:
            await callback.message.answer(
                text, parse_mode="Markdown", reply_markup=keyboard
            )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("bouquet_"))
async def handle_bouquet_selection(callback: types.CallbackQuery):
    bouquet_id = int(callback.data.replace("bouquet_", ""))
    try:
        bouquet = await sync_to_async(Bouquet.objects.get)(id=bouquet_id)
    except Bouquet.DoesNotExist:
        await callback.message.answer("–≠—Ç–æ—Ç –±—É–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî")
        return

    text = f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç *{bouquet.name}*! üíê\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
    keyboard = keyboards.get_bouquet_keyboard(bouquet)
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("order_"))
async def start_order(callback: types.CallbackQuery, state: FSMContext):
    bouquet_id = int(callback.data.replace("order_", ""))
    user, created = await sync_to_async(Customer.objects.get_or_create)(
        tg_id=callback.from_user.id
    )
    selected_bouquet = await sync_to_async(Bouquet.objects.get)(id=bouquet_id)
    await state.update_data(user_id=user.id, bouquet_id=selected_bouquet.id)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderState.waiting_for_name)
    await callback.answer()


@router.message(OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await sync_to_async(Customer.objects.filter(tg_id=message.from_user.id).update)(
        name=message.text
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderState.waiting_for_address)


@router.message(OrderState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏(–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM):"
    )
    await state.set_state(OrderState.waiting_for_delivery_time)


@router.message(OrderState.waiting_for_delivery_time)
async def process_delivery_time(message: types.Message, state: FSMContext):
    parsed_date = dateparser.parse(message.text, languages=["ru"])
    if not parsed_date:
        await message.answer(
            "–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏(–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM)"
        )
        return
    await state.update_data(delivery_time=parsed_date)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderState.waiting_for_phone)


@router.message(OrderState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user = await sync_to_async(Customer.objects.get)(id=user_data["user_id"])
    bouquet = await sync_to_async(Bouquet.objects.get)(id=user_data["bouquet_id"])
    order = await sync_to_async(Order.objects.create)(
        customer=user,
        bouquet=bouquet,
        address=user_data["address"],
        delivery_time=user_data["delivery_time"],
        status="new",
    )
    await message.answer(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\nüíê –ë—É–∫–µ—Ç: {bouquet.name}\nüìç –ê–¥—Ä–µ—Å: {user_data['address']}\n"
        f"‚è≥ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {user_data['delivery_time']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {message.text}"
    )
    await state.clear()
