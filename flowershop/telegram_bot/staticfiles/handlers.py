
import os

from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from shop.models import Bouquet, Customer, Order
from telegram_bot.staticfiles import keyboards
from aiogram.fsm.context import FSMContext  # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.fsm.state import State, StatesGroup
import dateparser
router = Router()


@router.message(CommandStart())
async def start_handler(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    await message.answer(
        "–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π",
        reply_markup=keyboards.get_occasion_keyboard()
    )


@router.callback_query(lambda c: c.data.startswith("occasion_"))
async def handle_occasion(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏"""
    occasion_key = callback.data.replace("occasion_", "")  # –î–æ—Å—Ç–∞–µ–º –∫–ª—é—á

    # –î–æ—Å—Ç–∞–µ–º –≤—Å–µ –±—É–∫–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è
    bouquets = await sync_to_async(list)(Bouquet.objects.filter(occasion=occasion_key))

    if not bouquets:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è üòî")
        return

    for bouquet in bouquets:
        text = f"üå∏ *{bouquet.name}*\n{bouquet.description}\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç",
                    callback_data=f"bouquet_{bouquet.id}"
                )
            ]]
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å—Ç—å –∏ –æ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–µ–∂–∏—Ç –≤ –ø–∞–ø–∫–µ media/)
        if bouquet.image:
            image_path = bouquet.image.path  # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print(f"–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")  # –ü–µ—á–∞—Ç–∞–µ–º –ø—É—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

            if os.path.exists(image_path):
                print('–°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª')
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                img_input = FSInputFile(image_path)  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ FSInputFile
                await callback.message.answer_photo(
                    img_input,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            else:
                await callback.message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—É–∫–µ—Ç–∞ {bouquet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        else:
            await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

        await callback.answer()


@router.callback_query(lambda c: c.data.startswith("bouquet_"))
async def handle_bouquet_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—É–∫–µ—Ç–∞"""
    bouquet_id = int(callback.data.replace("bouquet_", ""))

    try:
        bouquet = await sync_to_async(Bouquet.objects.get)(id=bouquet_id)
    except Bouquet.DoesNotExist:
        await callback.message.answer("–≠—Ç–æ—Ç –±—É–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî")
        return

    text = f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç *{bouquet.name}*! üíê\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(
            text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_{bouquet.id}"),
            InlineKeyboardButton(
                text="üå∏ –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"consultation_{bouquet.id}")],
            [InlineKeyboardButton(
                text="üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="view_collection")]
        ]
    )

    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()



class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_delivery_time = State()
    waiting_for_phone = State()


# –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(lambda c: c.data.startswith("order_"))
async def start_order(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""

    bouquet_id = int(callback.data.replace("order_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    user, created = await sync_to_async(Customer.objects.get_or_create)(
        tg_id=callback.from_user.id
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É–∫–µ—Ç –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_bouquet = await sync_to_async(Bouquet.objects.get)(id=bouquet_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(user_id=user.id, bouquet_id=selected_bouquet.id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderState.waiting_for_name)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞"""
    await sync_to_async(Customer.objects.filter(tg_id=message.from_user.id).update)(name=message.text)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderState.waiting_for_address)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
@router.message(OrderState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏"""
    await state.update_data(address=message.text)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏(–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM):")
    await state.set_state(OrderState.waiting_for_delivery_time)
    # parsed_date = dateparser.parse(message.text, languages=["ru"])  # –ü–∞—Ä—Å–∏–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥
    #
    # if not parsed_date:
    #     await message.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–∑–∞–≤—Ç—Ä–∞ –≤ 18:00'.")
    #     return


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.message(OrderState.waiting_for_delivery_time)
async def process_delivery_time(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data(delivery_time=message.text)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderState.waiting_for_phone)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.message(OrderState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_data = await state.get_data()

    user = await sync_to_async(Customer.objects.get)(id=user_data['user_id'])
    bouquet = await sync_to_async(Bouquet.objects.get)(id=user_data['bouquet_id'])

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order = await sync_to_async(Order.objects.create)(
        customer=user,
        bouquet=bouquet,
        address=user_data['address'],
        delivery_time=user_data['delivery_time'],
        status="new"
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await message.answer(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\nüíê –ë—É–∫–µ—Ç: {bouquet.name}\nüìç –ê–¥—Ä–µ—Å: {user_data['address']}\n"
        f"‚è≥ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {user_data['delivery_time']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {message.text}"
    )

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ